{"version":3,"sources":["GridModel.ts","GameModel.ts","Player.ts","DumbAI.ts","RemoteOpponent.ts","Board.tsx","DiscDropper.tsx","GameMenu.tsx","InGameMenu.tsx","InviteModal.tsx","Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellType","Turn","Result","MatchType","GridModel","_cells","this","Array","i","length","fill","Empty","makeAutoObservable","column","color","isColumnAvailable","nextAvailable","NUM_ROWS","Player","options","randomColor","Math","random","Red","Yellow","DumbAI","_self","_game","player","game","move","receiveOpponentMove","isOver","setTimeout","availableColumns","keys","forEach","canPlayDisc","push","floor","_makeMove","ENDPOINT","window","location","origin","convertObjectToQueryString","obj","str","Object","key","val","substr","RemoteOpponent","_socket","_roomFull","_connectionEnded","makeObservable","observable","roomId","search","substring","queryParams","oppositeCellType","turn","io","query","on","setGameJoinLink","createGameLink","receiveStartParams","receiveRematchParams","disconnect","emit","convertTurnToCellType","input","GameModel","_grid","_turn","_matchType","_playerProfile","_opponent","_joinLink","startTurn","_pickRandomColor","matchType","Local1v1","colorP1","colorP2","AI","notifyMove","Remote1v1","rows","some","cell","winner","_getWinner","isTie","_noOpenSpots","gameOver","result","InProgress","Tie","RedWin","YellowWin","placeDisc","isGameOver","GameOver","Error","playDisc","link","winningPieces","getWinningPieces","first","row","notifyOfRematch","opponentColor","start","NUM_COLS","second","third","fourth","col","FOUR","offset","startRow","startCol","hasJoined","hasDisconnected","Cell","props","className","styleCell","onMouseOver","onHover","onClick","Row","observer","cells","map","index","onCellHover","onCellClick","Board","waitingOnOpponent","hasOpponentJoined","gameDisconnected","hasOpponentLeft","gameDisabled","overlayMessage","React","useState","dots","setDots","useEffect","timer","clearTimeout","join","MessageOverlay","handleCellHover","handleCellClick","disabledClass","rowIndex","DiscDropper","columns","hoveredColumn","hoverCells","hovered","colorClass","visibilityClass","cellClass","GameMenu","selectedType","setSelectedType","handleRadioButtonChange","event","currentTarget","value","type","id","name","onChange","defaultChecked","htmlFor","onSubmitClicked","TurnDisplay","message","InGameMenu","nonLocalOpponent","playerColor","playerProfile","gameType","rematch","href","onInitiateRematch","mainMenu","onNavigateMainMenu","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","InviteModal","isOpen","onRequestClose","style","shouldCloseOnOverlayClick","target","rel","joinGameLink","hasJoinedGame","initialGameState","isColumnPlayable","Game","showMenu","setShowMenu","showGame","setShowGame","setGame","setHoveredColumn","inviteModalClosed","setInviteModalClosed","prevShowGameRef","useRef","current","abandonGame","selectedGameType","isPlayersTurn","backgroundClass","piece","initiateRematch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2801f81.chunk.js","sourcesContent":["import { makeAutoObservable } from 'mobx';\n\nexport const NUM_ROWS = 6, NUM_COLS = 7;\nexport const FOUR = 4; // the number in a row for a win, in future may be dynamic\n\nexport enum CellType {\n  Yellow = 'Yellow',\n  Red = 'Red',\n  Empty = 'Empty',\n}\n\nexport interface Coordinate {\n  row: number,\n  column: number,\n}\n\nexport class GridModel {\n  private _cells: Array<Array<CellType>>;\n  \n  constructor() {\n    this._cells = Array(NUM_ROWS);\n    for (let i = 0; i < this._cells.length; i++) {\n        this._cells[i] = Array(NUM_COLS).fill(CellType.Empty);\n    }\n    makeAutoObservable(this);\n  }\n  \n  public placeDisc(column: number, color: CellType) {\n    if (!this.isColumnAvailable(column)) return;\n\n    let nextAvailable = NUM_ROWS - 1;\n    while (this._cells[nextAvailable][column] !== CellType.Empty) {\n      nextAvailable--;\n    }\n    this._cells[nextAvailable][column] = color;\n  }\n  \n  public isColumnAvailable(column: number): boolean {\n    return this._cells[0][column] === CellType.Empty;\n  }\n  \n  get rows(): Array<Array<CellType>> {\n    return this._cells;\n  }\n}","import { makeAutoObservable } from 'mobx';\nimport { GridModel, CellType, NUM_COLS, NUM_ROWS, FOUR, Coordinate } from './GridModel';\nimport { Player } from './Player';\nimport { Opponent, Move } from './Opponent';\nimport { DumbAI } from './DumbAI';\nimport { RemoteOpponent } from './RemoteOpponent';\n\nexport enum Turn {\n  Yellow = 'Yellow',\n  Red = 'Red',\n  GameOver = 'GameOver',\n};\n\nexport enum Result {\n  RedWin = 'Red',\n  YellowWin = 'Yellow',\n  Tie = 'Tie',\n  InProgress = 'InProgress',\n};\n\nexport enum MatchType {\n  Local1v1 = 'Local match',\n  Remote1v1 = 'Remote match',\n  AI = 'AI match',\n};\n\nexport function convertTurnToCellType(turn: Turn) {\n  return turn === Turn.Red\n      ? CellType.Red\n      : turn === Turn.Yellow\n          ? CellType.Yellow\n          : CellType.Empty;\n}\n\nexport function oppositeCellType(input: CellType) {\n  return input === CellType.Empty\n    ? CellType.Empty\n    : input === CellType.Red\n      ? CellType.Yellow\n      : CellType.Red;\n}\n\nexport function convertCellTypeToTurn(cellType: CellType) {\n  return cellType === CellType.Red\n      ? Turn.Red\n      : cellType === CellType.Yellow\n          ? Turn.Yellow\n          : Turn.GameOver;\n}\n\ninterface GameModelOptions {\n  startTurn?: Turn;\n  matchType?: MatchType;\n}\n\nexport class GameModel {\n  private _grid: GridModel;\n  private _turn: Turn;\n  private _matchType: MatchType;\n  \n  /* Used for AI or Remote games */\n  private _playerProfile: Player;\n  private _opponent: Opponent;\n  private _joinLink: string;\n\n  constructor(options: GameModelOptions) {\n    this._grid = new GridModel();\n    this._turn = options.startTurn ?? this._pickRandomColor();\n    this._matchType = options.matchType ?? MatchType.Local1v1;\n\n    if (this._matchType !== MatchType.Local1v1) {\n      // Randomly assign colors\n      const colorP1 = convertTurnToCellType(this._pickRandomColor());\n      const colorP2 = oppositeCellType(colorP1);\n\n      this._playerProfile = new Player({\n        color: colorP1,\n      });\n      if (this._matchType === MatchType.AI) {\n        this._opponent = new DumbAI({\n          player: new Player({ color: colorP2 }),\n          game: this,\n        });\n\n        // AI goes first\n        if (convertTurnToCellType(this._turn) === colorP2) {\n          this._opponent.notifyMove(null);\n        }\n      } else if (this._matchType === MatchType.Remote1v1) {\n        this._opponent = new RemoteOpponent({\n          player: new Player({ color: colorP2 }),\n          game: this,\n        });\n      }\n    }\n\n    makeAutoObservable(this);\n  }\n\n  private _pickRandomColor(): Turn {\n    return Math.random() < 0.5\n      ? Turn.Red\n      : Turn.Yellow;\n  }\n\n  get turn(): Turn {\n    return this._turn;\n  }\n\n  get rows(): Array<Array<CellType>> {\n    return this._grid.rows;\n  }\n\n  get matchType(): MatchType {\n    return this._matchType;\n  }\n\n  get playerProfile(): Player {\n    return this._playerProfile;\n  }\n\n  get joinGameLink(): string {\n    return this._joinLink;\n  }\n\n  get hasOpponentJoined(): boolean {\n    return this?._opponent?.hasJoined;\n  }\n\n  get hasOpponentLeft(): boolean {\n    return this?._opponent?.hasDisconnected;\n  }\n\n  public abandonGame(): void {\n    this._opponent?.disconnect?.();\n  }\n\n  private _noOpenSpots(): boolean {\n    return !this._grid.rows[0].some((cell: CellType) => cell === CellType.Empty);\n  }\n\n  public isOver(): [boolean, Result] {\n    const winner = this._getWinner();\n    const isTie = winner === CellType.Empty && this._noOpenSpots();\n    const gameOver = winner !== CellType.Empty || isTie;\n\n    let result: Result = Result.InProgress;\n    if (gameOver) {\n      result = isTie\n        ? Result.Tie\n        : winner === CellType.Red\n          ? Result.RedWin\n          : Result.YellowWin;\n    }\n\n    return [ gameOver, result ];\n  }\n\n  public canPlayDisc(column: number, color: CellType): boolean {\n    return color !== CellType.Empty\n      && convertTurnToCellType(this.turn) === color\n      && this._grid.isColumnAvailable(column);\n  }\n\n  public playDisc(column: number, color: CellType) {\n    this._grid.placeDisc(column, color);\n\n    if (this._matchType !== MatchType.Local1v1 &&\n      color === this._playerProfile.color\n    ) {\n      this._opponent.notifyMove({\n        column,\n        color,\n      });\n    }\n\n    // Compute next turn\n    let [isGameOver] = this.isOver();\n    if (isGameOver) {\n      this._turn = Turn.GameOver;\n    } else {\n      this._turn = color === CellType.Red\n        ? Turn.Yellow\n        : Turn.Red;\n    }\n  }\n\n  public receiveOpponentMove(move: Move): void {\n    if (this.canPlayDisc(move.column, move.color)) {\n      this.playDisc(move.column, move.color);\n    } else {\n      throw Error(`Can't place opponent move: ${move.color} in column ${move.column}`);\n    }\n  }\n\n  public receiveStartParams(color: CellType, turn: Turn): void {\n    this._playerProfile.color = color;\n    this._turn = turn;\n  }\n\n  public setGameJoinLink(link: string) {\n    this._joinLink = link;\n  }\n\n  public getFinalResult(): Result {\n    return this.isOver()[1];\n  }\n\n  private _getWinner(): CellType {\n    const winningPieces = this.getWinningPieces();\n    if (winningPieces && winningPieces.length) {\n      const first = winningPieces[0];\n      return this._grid.rows[first.row][first.column];\n    } else {\n      return CellType.Empty;\n    }\n  }\n\n  public initiateRematch() {\n    this._grid = new GridModel();\n    this._turn = this._pickRandomColor();\n\n    if (this.matchType === MatchType.Remote1v1) {\n      this._grid = new GridModel();\n      this._turn = this._pickRandomColor();\n      this._opponent.notifyOfRematch(this._turn);\n    } else if (this.matchType === MatchType.AI) {\n      const opponentColor = oppositeCellType(this._playerProfile.color);\n      this._opponent = new DumbAI({\n        player: new Player({ color: opponentColor }),\n        game: this,\n      });\n\n      // AI goes first\n      if (convertTurnToCellType(this._turn) === opponentColor) {\n        this._opponent.notifyMove(null);\n      }\n    }\n  }\n\n  public receiveRematchParams(turn: Turn) {\n    this._grid = new GridModel();\n    this._turn = turn;\n  }\n\n  public getWinningPieces(): Array<Coordinate> {\n    const rows = this._grid.rows;\n\n    // iterate through rows\n    for (let row = 0; row < NUM_ROWS; row++) {\n      for (let start = 0; start <= NUM_COLS - FOUR; start++) {\n        const first = rows[row][start],\n          second = rows[row][start + 1],\n          third = rows[row][start + 2],\n          fourth = rows[row][start + 3];\n        if (first === second && second === third\n            && third === fourth && fourth !== CellType.Empty) {\n            return [\n              { row, column: start },\n              { row, column: start + 1 },\n              { row, column: start + 2 },\n              { row, column: start + 3 },\n            ];\n        }\n      }\n    }\n\n    // iterate through columns\n    for (let col = 0; col < NUM_COLS; col++) {\n      for (let start = 0; start <= NUM_ROWS - FOUR; start++) {\n        const first = rows[start][col],\n          second = rows[start + 1][col],\n          third = rows[start + 2][col],\n          fourth = rows[start + 3][col];\n        if (first === second && second === third\n            && third === fourth && fourth !== CellType.Empty) {\n            return [\n              { row: start, column: col },\n              { row: start + 1, column: col },\n              { row: start + 2, column: col },\n              { row: start + 3, column: col },\n            ];\n        }\n      }\n    }\n\n    // Check possible diagonals, both ways\n    // 1. left-to-right and top-to-bottom diagonals, beginning with lines that touch the bottom\n    for (let col = FOUR - 1; col < NUM_COLS; col++) {\n      for (let offset = 0; offset <= (col + 1 - FOUR) - (col >= NUM_ROWS ? col - NUM_ROWS + 1 : 0); offset++) { // todo: this math may have to be reconsidered if/when variable dimensions are introduced\n        const startRow = (NUM_ROWS - 1) - offset,\n          startCol = col - offset;\n        const first = rows[startRow][startCol],\n          second = rows[startRow - 1][startCol - 1],\n          third = rows[startRow - 2][startCol - 2],\n          fourth = rows[startRow - 3][startCol - 3];\n        if (first === second && second === third\n            && third === fourth && fourth !== CellType.Empty) {\n            return [\n              { row: startRow, column: startCol },\n              { row: startRow - 1, column: startCol - 1 },\n              { row: startRow - 2, column: startCol - 2 },\n              { row: startRow - 3, column: startCol - 3 },\n            ];\n        }\n      }\n    }\n    // 2. left-to-right and top-to-bottom diagonals, resuming with the next line touching the top\n    const nextCol = NUM_COLS - NUM_ROWS + 1;\n    for (let col = nextCol; col <= NUM_COLS - FOUR; col++) {\n      for (let offset = 0; offset <= NUM_COLS - col - FOUR; offset++) {\n        const first = rows[0 + offset][col + offset],\n          second = rows[1 + offset][col + offset + 1],\n          third = rows[2 + offset][col + offset + 2],\n          fourth = rows[3 + offset][col + offset + 3];\n        if (first === second && second === third\n            && third === fourth && fourth !== CellType.Empty) {\n            return [\n              { row: offset, column: col + offset },\n              { row: offset + 1, column: col + offset + 1 },\n              { row: offset + 2, column: col + offset + 2 },\n              { row: offset + 3, column: col + offset + 3 },\n            ];\n        }\n      }\n    }\n    // 3. right-to-left and top-to-bottom diagonals, beginning with lines that touch the bottom\n    for (let col = NUM_COLS - FOUR; col >= 0; col--) {\n      for (let offset = 0; offset <= (NUM_COLS - col - FOUR) - (NUM_COLS - col > NUM_ROWS ? (NUM_COLS - col) - NUM_ROWS : 0); offset++) { // todo: re-evaluate this logic when moving to a dynamic grid size\n        const startCol = col + offset,\n          startRow = NUM_ROWS - 1 - offset;\n        const first = rows[startRow][startCol],\n          second = rows[startRow - 1][startCol + 1],\n          third = rows[startRow - 2][startCol + 2],\n          fourth = rows[startRow - 3][startCol + 3];\n        if (first === second && second === third\n            && third === fourth && fourth !== CellType.Empty) {\n            return [\n              { row: startRow, column: startCol },\n              { row: startRow - 1, column: startCol + 1 },\n              { row: startRow - 2, column: startCol + 2 },\n              { row: startRow - 3, column: startCol + 3 },\n            ];\n        }\n      }\n    }\n    // 4. right-to-left and top-to-bottom diagonals, resuming with the next line touching the top\n    for (let col = NUM_ROWS - 2; col >= FOUR - 1; col--) {\n      for (let offset = 0; offset <= col - FOUR + 1; offset++) {\n        const first = rows[0][col],\n          second = rows[1][col - 1],\n          third = rows[2][col - 2],\n          fourth = rows[3][col - 3];\n        if (first === second && second === third\n            && third === fourth && fourth !== CellType.Empty) {\n            return [\n              { row: 0, column: col },\n              { row: 1, column: col - 1 },\n              { row: 2, column: col - 2 },\n              { row: 3, column: col - 3 },\n            ];\n        }\n      }\n    }\n\n    return [];\n  }\n}","import { CellType } from './GridModel';\n\nexport interface PlayerOptions {\n  color?: CellType;\n}\n\nexport class Player {\n  public color: CellType;\n\n  constructor (options: PlayerOptions) {\n    this.color = options?.color || randomColor();\n  }\n}\n\nconst randomColor = () => {\n  return Math.random() < 0.5\n    ? CellType.Red\n    : CellType.Yellow;\n};","import { Opponent, Move, OpponentOptions } from './Opponent';\nimport { NUM_COLS } from './GridModel';\nimport { GameModel } from './GameModel';\nimport { Player } from './Player';\n\nexport class DumbAI implements Opponent {\n  private _self: Player;\n  private _game: GameModel;\n\n  constructor (options: OpponentOptions) {\n    this._self = options.player;\n    this._game = options.game;\n  }\n\n  private _makeMove(move: Move) {\n    this._game.receiveOpponentMove(move);\n  }\n\n  public notifyMove(move: Move): void {\n    let [isGameOver] = this._game.isOver();\n    if (!isGameOver) {\n      setTimeout(() => {\n        const color = this._self.color;\n        const availableColumns: number[] = [];\n        [...Array(NUM_COLS).keys()].forEach((column) => {\n          this._game.canPlayDisc(column, color) && availableColumns.push(column);\n        });\n        const column = availableColumns[Math.floor(Math.random() * availableColumns.length)];\n  \n        this._makeMove({\n          color,\n          column,\n        });\n      }, 2000);\n    }\n  }\n\n  get hasJoined(): boolean {\n    return true;\n  }\n\n  get hasDisconnected(): boolean {\n    return false;\n  }\n}","import { Opponent, Move, OpponentOptions } from './Opponent';\nimport { io, Socket } from 'socket.io-client';\nimport { CellType } from './GridModel';\nimport { Player } from './Player';\nimport { GameModel, Turn, oppositeCellType } from './GameModel';\nimport { makeObservable, observable } from 'mobx';\n\nconst ENDPOINT = window.location.origin; // \"http://localhost:5000\"; todo: can this be assumed to be the same url+portit was served from\n\nconst convertObjectToQueryString = (obj: { [key: string]: any }): string => {\n  let str = '';\n  Object.keys(obj).forEach((key: string) => {\n    const val = obj[key] ?? '';\n    str += `${key}=${val}&`;\n  });\n  return str.substr(0, str.length - 1);\n};\n\nconst createGameLink = (roomId: string): string => {\n  return `${window.location.origin}/?${roomId}`;\n}\n\nexport class RemoteOpponent implements Opponent {\n  private _socket: Socket;\n  private _self: Player;\n  private _game: GameModel;\n  private _roomFull: boolean;\n  private _connectionEnded: boolean;\n\n  constructor (options: OpponentOptions) {\n    makeObservable<RemoteOpponent | \"_roomFull\" | \"_connectionEnded\">(this, {\n      _roomFull: observable,\n      _connectionEnded: observable,\n    });\n\n    this._self = options.player;\n    this._game = options.game;\n    this._roomFull = false;\n    this._connectionEnded = false;\n\n    // Determine handshake query based on the state of the game being joined/created\n    const roomId = window.location?.search?.substring(1);\n    const queryParams = roomId && roomId.length\n      ? {\n        roomId: roomId,\n      }\n      : {\n        roomId: roomId || null,\n        color: oppositeCellType(this._self.color),\n        turn: this._game.turn,\n      };\n\n    // instantiate socket, set up communication\n    this._socket = io(ENDPOINT, {\n      query: convertObjectToQueryString(queryParams),\n    });\n    \n    this._socket.on('room formed', (roomId: string) => {\n      this._game.setGameJoinLink(createGameLink(roomId));\n    });\n    this._socket.on('second player joined', () => {\n      this._roomFull = true;\n    });\n\n    this._socket.on('gameSetup', (color: CellType, turn: Turn) => {\n      this._game.receiveStartParams(color, turn);\n      this._roomFull = true;\n    });\n\n    this._socket.on('disc played', (color: CellType, column: number) => {\n      this._makeMove({\n        column,\n        color,\n      });\n    });\n\n    this._socket.on('receive rematch', (turn: Turn) => {\n      this._game.receiveRematchParams(turn);\n    });\n\n    this._socket.on('disconnect', () => {\n      this.disconnect();\n    });\n    this._socket.on('room ended', () => {\n      this.disconnect();\n    });\n  }\n\n  public disconnect() {\n    this._roomFull = false;\n    this._connectionEnded = true;\n    this._socket.disconnect();\n  }\n\n  private _makeMove(move: Move) {\n    this._game.receiveOpponentMove(move);\n  }\n\n  public notifyMove(move: Move): void {\n    this._socket.emit('play disc', move.color, move.column);\n  }\n\n  public notifyOfRematch(turn: Turn) {\n    this._socket.emit('request rematch', turn);\n  }\n\n  get hasJoined(): boolean {\n    return this._roomFull || this._connectionEnded;\n  }\n\n  get hasDisconnected(): boolean {\n    return this._connectionEnded;\n  }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\n\nimport { CellType } from './GridModel';\nimport { GameModel, MatchType } from './GameModel';\n\ninterface ICellProps {\n  column: number;\n  row: number;\n\n  onClick: (column: number) => void;\n  onHover: (column: number) => void;\n  styleCell: (column: number, row: number) => string;\n}\n\nconst Cell = (props: ICellProps) => {\n  return (\n    <div\n      className={props.styleCell(props.column, props.row)}\n      onMouseOver={() => props.onHover(props.column)}\n      onClick={() => props.onClick(props.column)}\n    ></div>\n  );\n}\n\ninterface IRowProps {\n  cells: Array<CellType>;\n  index: number;\n  onCellHover: (column: number) => void;\n  onCellClick: (column: number) => void;\n  styleCell: (column: number, row: number) => string;\n}\n\nconst Row = observer((props: IRowProps) => {\n  return (\n    <div className=\"row\">\n      {props.cells.map((cell, index) => (\n        <Cell\n          key={index}\n          column={index}\n          row={props.index}\n          onHover={props.onCellHover}\n          onClick={props.onCellClick}\n          styleCell={props.styleCell}\n        />)\n      )}\n    </div>\n  );\n})\n\ninterface IMessageOverlayProps {\n  waitingOnOpponent: boolean;\n  gameDisconnected: boolean;\n}\n\nconst MessageOverlay = (props: IMessageOverlayProps): JSX.Element => {\n  const [dots, setDots] = React.useState<number>(0);\n  \n  React.useEffect(() => {\n    if (props.waitingOnOpponent) {\n      let timer = setTimeout(() => {\n        const nextDots = (dots + 1) % 4;\n        setDots(nextDots);\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [props.waitingOnOpponent, dots]);\n\n  if (props.waitingOnOpponent) {\n    return <h3>Waiting on opponent to join {Array(dots).fill('.').join(' ')}</h3>;\n  } else if (props.gameDisconnected) {\n    return <h3>Opponent has disconnected</h3>;\n  } else {\n    return null;\n  }\n};\n\ninterface IBoardProps {\n  game: GameModel;\n  onCellHover: (column: number) => void;\n  onCellClick: (column: number) => void;\n  styleCell: (column: number, row: number) => string;\n}\n\nexport const Board = observer((props: IBoardProps) => {\n  const waitingOnOpponent = props.game.matchType === MatchType.Remote1v1 && !props.game.hasOpponentJoined;\n  const gameDisconnected = props.game.matchType === MatchType.Remote1v1 && props.game.hasOpponentLeft;\n  const gameDisabled = waitingOnOpponent || gameDisconnected;\n\n  const overlayMessage = MessageOverlay({\n    waitingOnOpponent,\n    gameDisconnected,\n  });\n  const handleCellHover = gameDisabled\n    ? (column: number) => {}\n    : props.onCellHover;\n  const handleCellClick = gameDisabled\n    ? (column: number) => {}\n    : props.onCellClick;\n  const disabledClass = gameDisabled\n    ? 'board-disabled'\n    : '';\n\n  return (\n    <>\n      <div className={`board ${disabledClass}`}>\n        {props.game.rows.map((row, rowIndex) => (\n          <Row\n            key={rowIndex}\n            cells={row}\n            index={rowIndex}\n            onCellHover={handleCellHover}\n            onCellClick={handleCellClick}\n            styleCell={props.styleCell}\n          />)\n        )}\n        {overlayMessage && \n          <div className=\"board-overlay\">\n            {overlayMessage}\n          </div>\n        }\n      </div>\n    </>\n  );\n});","import { NUM_COLS } from './GridModel';\nimport { Turn } from './GameModel';\n\ninterface IDiscDropperProps {\n  hoveredColumn: number;\n  turn: Turn;\n}\n\nexport const DiscDropper = (props: IDiscDropperProps) => {\n  const columns: Array<boolean> = Array(NUM_COLS).fill(false);\n  if (0 <= props.hoveredColumn && props.hoveredColumn < NUM_COLS) {\n    columns[props.hoveredColumn] = true;\n  }\n\n  const hoverCells = columns.map((hovered, index) => {\n    const colorClass = props.turn === Turn.GameOver\n      ? 'blank'\n      : props.turn === Turn.Red\n        ? 'red-disc'\n        : 'yellow-disc';\n    const visibilityClass = hovered ? '' : 'invisible';\n    const cellClass = `cell ${colorClass} ${visibilityClass}`;\n    return (\n      <div key={index} className={cellClass}></div>\n    );\n  });\n\n  return (\n    <div className=\"row\">\n      {hoverCells}\n    </div>\n  );\n};","import React from 'react';\nimport { MatchType } from './GameModel';\n\ninterface IGameMenuProps {\n  onSubmitClicked: (selectedGameType: string) => void;\n}\n\nexport const GameMenu = (props: IGameMenuProps) => {\n  const [selectedType, setSelectedType] = React.useState<string>(MatchType.Local1v1);\n\n  const handleRadioButtonChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedType(event.currentTarget.value);\n  };\n  const handleSubmitClicked = () => {\n    props.onSubmitClicked(selectedType);\n  };\n\n  return (\n    <div className=\"game-menu\">\n      <form>\n        <h3>Game type</h3>\n        <div>\n          <div className=\"option\">\n            <input\n              type=\"radio\"\n              id=\"local\"\n              name=\"game-type\"\n              value={MatchType.Local1v1}\n              onChange={handleRadioButtonChange}\n              defaultChecked />\n            <label htmlFor=\"local\">1 vs. 1, same computer</label>\n          </div>\n          <div className=\"option\">\n            <input\n              type=\"radio\"\n              id=\"remote\"\n              name=\"game-type\"\n              value={MatchType.Remote1v1}\n              onChange={handleRadioButtonChange} />\n            <label htmlFor=\"remote\">1 vs. 1, invite with code</label>\n          </div>\n          <div className=\"option\">\n            <input\n              type=\"radio\"\n              id=\"ai\"\n              name=\"game-type\"\n              value={MatchType.AI}\n              onChange={handleRadioButtonChange} />\n            <label htmlFor=\"ai\">Play an AI (dumb)</label>\n          </div>\n        </div>\n        <input type=\"button\" value=\"Launch game\" onClick={handleSubmitClicked} />\n      </form>\n    </div>\n  );\n}","import { Turn, GameModel, MatchType } from './GameModel';\n\ninterface ITurnDisplayProps {\n  turn: Turn;\n}\n\nconst TurnDisplay = (props: ITurnDisplayProps) => {\n  const message = props.turn === Turn.GameOver\n    ? 'Game Over'\n    : props.turn;\n  return <p><b>Turn</b>: {message}</p>;\n};\n\ninterface IInGameMenu {\n  onInitiateRematch: () => void;\n  onNavigateMainMenu: () => void;\n  game: GameModel;\n}\n\nexport const InGameMenu = (props: IInGameMenu) => {\n  const handleRematchClick = () => {\n    props.onInitiateRematch();\n  };\n  const handleMainMenuClick = () => {\n    props.onNavigateMainMenu();\n  };\n\n  const nonLocalOpponent = props.game.matchType !== MatchType.Local1v1;\n  const playerColor = nonLocalOpponent && <p><b>Your color</b>: {props.game.playerProfile.color}</p>;\n\n  const gameType = <h3 className=\"match-type\">{props.game.matchType}</h3>;\n  const rematch = <p><a href=\"#rematch\" onClick={handleRematchClick}>Rematch &#8635;</a></p>;\n  const mainMenu = <p><a href=\"#menu\" onClick={handleMainMenuClick}>Main Menu &#8594;</a></p>;\n\n  return (\n    <div className=\"in-game-menu\">\n      { gameType }\n      <div className=\"colors\">\n        { nonLocalOpponent && playerColor }\n        <TurnDisplay turn={props.game.turn} />\n      </div>\n      <div className=\"actions\">\n        { props.game.turn === Turn.GameOver && rematch }\n        { mainMenu }\n      </div>\n    </div>\n  );\n};","import Modal from 'react-modal';\n\ninterface IInviteModalProps {\n  isOpen: boolean;\n  onRequestClose: () => void;\n  joinGameLink: string;\n}\n\nModal.setAppElement('#root');\n\nconst customStyles = {\n  content : {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\nexport const InviteModal = (props: IInviteModalProps) => {\n  return (\n    <Modal\n      isOpen={props.isOpen}\n      onRequestClose={props.onRequestClose}\n      style={customStyles}\n      shouldCloseOnOverlayClick={false}\n    >\n      <>\n        <h2>Invite a friend</h2>\n        <p>Copy link: <a target=\"_blank\" rel=\"noreferrer\" href={props.joinGameLink}>{props.joinGameLink}</a></p>\n        <button onClick={props.onRequestClose}>Close</button>\n      </>\n    </Modal>\n  );\n}","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { GameModel, convertTurnToCellType, MatchType } from './GameModel';\nimport { Board } from './Board';\nimport { DiscDropper } from './DiscDropper';\nimport { CellType } from './GridModel';\nimport { GameMenu } from './GameMenu';\nimport { InGameMenu } from './InGameMenu';\nimport { InviteModal } from './InviteModal';\n\nconst roomId = window.location?.search?.substring(1);\nconst hasJoinedGame = roomId && roomId.length === 8;\nconst initialGameState = hasJoinedGame\n  ? new GameModel({ matchType: MatchType.Remote1v1 })\n  : null;\n\nconst isColumnPlayable = (column: number, game: GameModel) => {\n  return game.canPlayDisc(column, convertTurnToCellType(game.turn));\n};\n\nexport const Game = observer(() => {\n  const [ showMenu, setShowMenu ] = React.useState(!hasJoinedGame);\n  const [ showGame, setShowGame ] = React.useState(hasJoinedGame);\n  const [ game, setGame ] = React.useState<GameModel>(initialGameState);\n  const [ hoveredColumn, setHoveredColumn ] = React.useState<number>(-1);\n  const [ inviteModalClosed, setInviteModalClosed ] = React.useState<boolean>(false);\n\n  const playDisc = (column: number, color: CellType) => {\n    game.playDisc(column, color);\n    setHoveredColumn(-1);\n  };\n\n  const handleCellHover = (column: number) => {\n    const playerColor = game.matchType === MatchType.Local1v1\n      ? convertTurnToCellType(game.turn)\n      : game.playerProfile.color;\n    const isPlayersTurn = playerColor === convertTurnToCellType(game.turn);\n    if (isColumnPlayable(column, game) && isPlayersTurn) {\n      setHoveredColumn(column);\n    }\n  };\n  const handleCellClick = (column: number) => {\n    if (isColumnPlayable(column, game)) {\n      const playerColor = game.matchType === MatchType.Local1v1\n        ? convertTurnToCellType(game.turn)\n        : game.playerProfile.color;\n      if (game.matchType === MatchType.Local1v1) {\n        playDisc(column, playerColor);\n      } else if (playerColor === convertTurnToCellType(game.turn)) {\n        playDisc(column, playerColor);\n      }\n    }\n  };\n  const styleCell = (column: number, row: number): string => {\n    const cell: CellType = game.rows[row][column];\n    const colorClass = cell === CellType.Empty\n      ? 'blank'\n      : cell === CellType.Red\n        ? 'red-disc'\n        : 'yellow-disc'; // ToDo: how to define these class references in TS?\n    \n    let backgroundClass = '';\n    const winningPieces = game.getWinningPieces();\n    if (winningPieces.length\n        && winningPieces.some(piece => piece.column === column && piece.row === row)) {\n      backgroundClass = 'winning-disc';\n    }\n    return `cell ${colorClass} ${backgroundClass}`;\n  };\n  const handleMenuSelection = (selectedGameType: string) => {\n    setShowMenu(false);\n\n    if (selectedGameType === MatchType.Local1v1) {\n      setGame(new GameModel({\n        matchType: MatchType.Local1v1,\n      }));\n    } else if (selectedGameType === MatchType.Remote1v1) {\n      setGame(new GameModel({ // todo: does not work when creating a second game in a session\n        matchType: MatchType.Remote1v1,\n      }));\n    } else if (selectedGameType === MatchType.AI) {\n      setGame(new GameModel({\n        matchType: MatchType.AI,\n      }));\n    }\n    setShowGame(true);\n  };\n  const handleInitiateRematch = () => {\n    if (game.matchType === MatchType.Local1v1) {\n      setGame(new GameModel({\n        matchType: game.matchType,\n      }));\n    } else {\n      game.initiateRematch();\n    }\n  };\n  const handleNavigateMainMenu = () => {\n    setShowGame(false);\n    setShowMenu(true);\n  };\n  const closeModal = () => {\n    setInviteModalClosed(true);\n  }\n\n  const prevShowGameRef = React.useRef<boolean>();\n  React.useEffect(() => {\n    prevShowGameRef.current = showGame;\n  });\n  const prevShowGame = prevShowGameRef.current;\n  if (prevShowGame && showMenu) {\n    game.abandonGame();\n  }\n\n  return (\n    <>\n      {showMenu && <GameMenu onSubmitClicked={handleMenuSelection} /> }\n      {showGame && \n        <>\n          <div className=\"game-area\">\n            <div>\n              <DiscDropper\n                hoveredColumn={hoveredColumn}\n                turn={game.turn}\n              />\n              <Board\n                game={game}\n                onCellHover={handleCellHover}\n                onCellClick={handleCellClick}\n                styleCell={styleCell}\n              />\n            </div>\n            <InGameMenu\n              onInitiateRematch={handleInitiateRematch}\n              onNavigateMainMenu={handleNavigateMainMenu}\n              game={game}\n            />\n          </div>\n          <InviteModal\n            isOpen={game.joinGameLink && !inviteModalClosed}\n            onRequestClose={closeModal}\n            joinGameLink={game.joinGameLink}\n          />\n        </>\n      }\n    </>\n  );\n})","import React from 'react';\nimport './App.css';\nimport { Game } from './Game';\n\nfunction App() {\n  return (\n    <>\n      <h1>Connect 4</h1>\n      <Game />\n    </>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}